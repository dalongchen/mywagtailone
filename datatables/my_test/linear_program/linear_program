from scipy import optimize as op
import numpy as np

"""Scipy 只能求解线性规划，不能求解整数规划"""

# c指的应该是要求最大值的函数的系数数组，A_ub是应该是不等式未知量的系数矩阵，原来这不等式指的是<=的不等式，
# 那如果是>=呢，乘个负号就行了。A_eq就是其中等式的未知量系数矩阵了。B_ub就是不等式的右边了，B_eq就是等式右边了。
# bounds的话，指的就是每个未知量的范围了
# 您可以使用该参数method来定义要使用的线性规划方法。有以下三种选择：
# method="interior-point"选择内点法。默认情况下设置此选项。
# method="revised simplex" 选择修正的两相单纯形法。
# method="simplex" 选择传统的两相单纯形方法。
# linprog() 返回具有以下属性的数据结构：
# .con 是等式约束残差。
# .fun 是最优的目标函数值（如果找到）。
# .message 是解决方案的状态。
# .nit 是完成计算所需的迭代次数。
# .slack 是松弛变量的值，或约束左右两侧的值之间的差异。
# .status是一个介于0和之间的整数4，表示解决方案的状态，例如0找到最佳解决方案的时间。
# .success是一个布尔值，显示是否已找到最佳解决方案。
# .x 是一个保存决策变量最优值的 NumPy 数组。
def linear_test():
    c = np.array([2, 3, -5])  # c指要求最大值的函数的系数数组,-c为最小
    A_ub = np.array([[-2, 5, -1], [1, 3, 1]])  # 不等式指的是<=的不等式,A_ub是不等式未知量的系数矩阵
    B_ub = np.array([-10, 12])
    A_eq = np.array([[1, 1, 1]])
    B_eq = np.array([7])
    x1 = (0, 7)  # 变量范围
    x2 = (0, 7)
    x3 = (0, 7)
    res = op.linprog(-c, A_ub, B_ub, A_eq, B_eq, bounds=(x1, x2, x3))
    print(res)

# linear_test()


# 运筹学书第一例
def linear_test_book():
    c = np.array([2, 3])
    A_ub = np.array([[1, 2], [4, 0], [0, 4]])
    B_ub = np.array([8, 16, 12])
    # A_eq = np.array([[1, 1, 1]])
    # B_eq = np.array([7])
    x1 = (0, 70)
    x2 = (0, 70)
    res = op.linprog(-c, A_ub, B_ub, bounds=(x1, x2))
    print(res)


# linear_test_book()

# 运筹学书第2例，求用料最少
def linear_test_book_material():
    c = np.array([0, 0.1, 0.2, 0.3, 0.8])
    # A_ub = np.array([[1, 2], [4, 0], [0, 4]])
    # B_ub = np.array([8, 16, 12])
    A_eq = np.array([[1, 2, 0, 1, 0], [0, 0, 2, 2, 1], [3, 1, 2, 0, 3]])
    B_eq = np.array([100, 100, 100])
    x1 = (0, 70)
    x2 = (0, 70)
    x3 = (0, 70)
    x4 = (0, 70)
    x5 = (0, 70)
    res = op.linprog(c, A_eq, B_eq, bounds=(x1, x2, x3, x4, x5))
    print(res)

# linear_test_book_material()


def linear_teacher():
    c = np.array([0.05, 0.27, 0.19, 0.185, 0.185])
    A_ub = np.array([[0, 0.025, 0, 0, 0], [0, 0, 0.015, 0, 0], [0, 0, 0, 0.055, 0], [0, 0, 0, 0, 0.026]])
    B_ub = np.array([0.006, 0.006, 0.006, 0.006])
    A_eq = np.array([[1, 1.01, 1.02, 1.045, 1.065]])
    B_eq = np.array([1])
    x1 = (0, 70)
    x2 = (0, 7)
    res = op.linprog(-c, A_ub=A_ub, b_ub=B_ub, A_eq=A_eq, b_eq=B_eq)
    print(res)


# linear_teacher()


# 快递用人最优2-12例
def linear_book_2_12_express():
    c = np.array([150, 150, 150, 80, 80, 80])  # c指要求最大值的函数的系数数组,-c为最小
    A_ub = np.array([
         [500, 0, 0, 0, 0, 0],
         [1000, 500, 0, 0, 0, 0],
         [1500, 1000, 500, 0, 0, 0],
         [2000, 1500, 1000, 500, 0, 0],
         [2500, 2000, 1500, 1000, 500, 0],
         [3000, 2500, 2000, 1500, 1000, 500],

         [3500, 3000, 2500, 2000, 1500, 1000],
         [4000, 3500, 3000, 2500, 2000, 1500],
         [4000, 4000, 3500, 2500, 2500, 2000],
         [1, 1, 1, 1, 1, 1],

         [-4000, -4000, -4000, -2500, -2500, -2500],
         [-2000, -1500, -1000, -500, 0, 0],
         [-3500, -3000, -2500, -2000, -1500, -1000]
         ])  # 不等式指的是<=的不等式,A_ub是不等式未知量的系数矩阵
    B_ub = np.array([
        5000,
        9000,
        12000,
        16000,
        18500,
        21500,
        25500,
        30000,
        33500,
        11,

        -36000,
        -12000,
        -21500,
         ])
    # A_eq = np.array([[1, 1, 1]])
    # B_eq = np.array([7])
    x1 = (0, 11)  # 变量范围
    x2 = (0, 11)
    x3 = (0, 11)
    x4 = (0, 11)
    x5 = (0, 11)
    x6 = (0, 11)
    res = op.linprog(-c, A_ub, B_ub, bounds=(x1, x2, x3, x4, x5, x6))
    print(res)

linear_book_2_12_express()